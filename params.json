{"name":"FLDT","tagline":"The Fast Linux Deployment Toolkit","body":"FLDT\r\n====\r\n\r\n##### The Fast Linux Deployment Toolkit\r\n\r\nFLDT (Fast Linux Deployment Toolkit) uses a variety of open source tools to\r\nquickly image and configure Linux hardware, and is versatile enough to handle\r\neither single machines or large batches of systems.\r\n\r\nFLDT was developed by Penn Manor High School student Andrew Lobos in conjunction\r\nwith the Penn Manor IT Team for use in the 2014 Penn Manor High School 1:1\r\nStudent Laptop Program.\r\n\r\nImaging is accomplished by using partclone to copy and restore only the used\r\nblocks from the file system. Images are transferred to clients via NFS or\r\nmulticasted via udpcast. FLDT also provides methods for running post-image\r\nscripts, such as machine-specific configurations like automatically setting\r\nhostnames and forcing password change on next boot. Additionally, the host\r\ndatabase and imaging can be managed via a custom Node.js powered web panel.\r\n\r\nInformation about the Penn Manor 1:1 student laptop\r\nprogram, which heavily used this software, can be found\r\n[here](http://www.pennmanor.net/techblog/?page_id=1561).\r\n\r\n##### External References:\r\n\r\n- [Partclone](http://partclone.org/)\r\n- [Udpcast](http://www.udpcast.linux.lu)\r\n\r\n## Screenshot\r\n![Hosts](https://raw.githubusercontent.com/tomswartz07/FLDT/fba88ad772616cc608628ca1babc5799c96ad49d/screenshots/3.png)\r\n\r\n\r\n## Install\r\n#### Prerequisites\r\n* Node.js\r\n* Redis-Server\r\n* CPIO\r\n* A NFS export of image files located at `/images`\r\n* A DHCP server configured for PXE booting, along with TFTPd\r\n* A compiled Linux kernel with support for your hardware, devtmpfs, and NFS filesystems.\r\n\r\nThe information listed below will provide generic instructions on the setup process.\r\n\r\n#### Installation\r\nBasic installation is as follows:\r\n```bash\r\n# Clone the project and project files\r\ngit clone http://github.com/tomswartz07/FLDT\r\n\r\n# Install Node.js dependencies\r\ncd FLDT/server\r\nnpm install\r\n\r\n# Build bootimages\r\ncd ../bootimage\r\n./makeimage\r\ncp -r images/* /var/lib/tftpboot\r\n```\r\n\r\nNext, set up a PXE infrastructure to boot the generated images.\r\nFor further information on this process, refer to the [PXELINUX project](http://www.syslinux.org/wiki/index.php/PXELINUX).\r\n\r\nA detailed guide for setting up the PXE boot environment is found on the [ArchWiki](https://wiki.archlinux.org/index.php/PXE#Server_setup).\r\n\r\nFollowing that, the server could be started via the command ``node FLDT/server/server.js``. You might need sudo depending on how redis-server is configured.\r\n\r\n#### Creating an Image\r\nThe default imaging scripts expect these items in an image:\r\n* A folder in /image with the folder's name\r\n* A sfdisk generated partitiontable.txt\r\n* Each partimage image for each partition named with the drive name (i.e. The file named sda1 will be restored to /dev/sda1)\r\n\r\n## Customizing Image Process\r\nFLDT is not as turn-key as other imaging solutions, such as [FOG](http://www.fogproject.org/) - but it makes up for this in the ease by which it may be configured.\r\n\r\nEach \"action\" that FLDT performs is a separate script, which is put into the bootable image.\r\nIf you need FLDT to do something different, simply edit the scripts in ``bootimage/scripts`` and run ``makeimage.sh`` to regenerate the boot images.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}